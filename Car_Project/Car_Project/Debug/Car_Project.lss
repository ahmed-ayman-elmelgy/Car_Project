
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000c62  00000cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800082  00800082  00000d18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f94  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3e  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001513  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  0000514c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b91  00000000  00000000  000056a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b0  00000000  00000000  00006231  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_4>
  14:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_9>
  28:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_10>
  2c:	0c 94 40 04 	jmp	0x880	; 0x880 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 01 	call	0x332	; 0x332 <main>
  8a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_init>:
***************************************************************************************************/
/**************************************************************************************************
* BUTTON_init
***************************************************************************************************/
void                           BUTTON_init       (void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t  index = Btn_Start; 
	for(index = Btn_Start ; index < Btn_End ; index++)
	{
		/* 1. set the direction as input */
		DIO_setPinDirection (Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin, DIO_u8_INPUT);
  9a:	fe 01       	movw	r30, r28
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	e0 5a       	subi	r30, 0xA0	; 160
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	61 81       	ldd	r22, Z+1	; 0x01
  a6:	80 81       	ld	r24, Z
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
  ae:	21 96       	adiw	r28, 0x01	; 1
* BUTTON_init
***************************************************************************************************/
void                           BUTTON_init       (void)
{
	uint8_t  index = Btn_Start; 
	for(index = Btn_Start ; index < Btn_End ; index++)
  b0:	c4 30       	cpi	r28, 0x04	; 4
  b2:	d1 05       	cpc	r29, r1
  b4:	91 f7       	brne	.-28     	; 0x9a <BUTTON_init+0x8>
		/* 1. set the direction as input */
		DIO_setPinDirection (Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin, DIO_u8_INPUT);
		/* 2. set pull-up resistor */
		//DIO_SetPullupRes(Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin);
	}
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <BUTTON_READ>:
BUTTON_ERROR_state_t            BUTTON_READ       (EN_Button_t num, BTN_State_t * ptr_return_value)
{
	//return Error state
	BUTTON_ERROR_state_t return_value = Valid_BTN_init;
	/* 1. check if num is in correct range */
	if((num < Btn_Start) || (num > Btn_End))
  bc:	85 30       	cpi	r24, 0x05	; 5
  be:	80 f4       	brcc	.+32     	; 0xe0 <BUTTON_READ+0x24>
		return_value = Invalid_Num ;
	}
	else
	{	
		/* 2. check the return pointer is Valid */
		if(ptr_return_value == NULL)
  c0:	61 15       	cp	r22, r1
  c2:	71 05       	cpc	r23, r1
  c4:	79 f0       	breq	.+30     	; 0xe4 <BUTTON_READ+0x28>
  c6:	ab 01       	movw	r20, r22
			return_value = Invalid_Pointer ;
		}
		else
		{
			/* 3. set the return value in the return pointer */
			DIO_readPin(Arr_ST_Btn_cfg [num].PORT, Arr_ST_Btn_cfg [num].num_pin, ptr_return_value);
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e0 5a       	subi	r30, 0xA0	; 160
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	61 81       	ldd	r22, Z+1	; 0x01
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_readPin>
***************************************************************************************************/

BUTTON_ERROR_state_t            BUTTON_READ       (EN_Button_t num, BTN_State_t * ptr_return_value)
{
	//return Error state
	BUTTON_ERROR_state_t return_value = Valid_BTN_init;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
	/* 1. check if num is in correct range */
	if((num < Btn_Start) || (num > Btn_End))
	{
		return_value = Invalid_Num ;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
	else
	{	
		/* 2. check the return pointer is Valid */
		if(ptr_return_value == NULL)
		{
			return_value = Invalid_Pointer ;
  e4:	82 e0       	ldi	r24, 0x02	; 2
			/* 3. set the return value in the return pointer */
			DIO_readPin(Arr_ST_Btn_cfg [num].PORT, Arr_ST_Btn_cfg [num].num_pin, ptr_return_value);
		}
	}
	return return_value;
}
  e6:	08 95       	ret

000000e8 <MOTOR_INIT>:

			return_value = MOTOR_Dir_CW;
		}
	}
	return return_value;
}
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8b 01       	movw	r16, r22
  f6:	e8 2e       	mov	r14, r24
  f8:	f1 2c       	mov	r15, r1
  fa:	e7 01       	movw	r28, r14
  fc:	cc 0f       	add	r28, r28
  fe:	dd 1f       	adc	r29, r29
 100:	ce 0d       	add	r28, r14
 102:	df 1d       	adc	r29, r15
 104:	cc 0f       	add	r28, r28
 106:	dd 1f       	adc	r29, r29
 108:	c8 59       	subi	r28, 0x98	; 152
 10a:	df 4f       	sbci	r29, 0xFF	; 255
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	69 81       	ldd	r22, Y+1	; 0x01
 110:	88 81       	ld	r24, Y
 112:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	69 81       	ldd	r22, Y+1	; 0x01
 11a:	88 81       	ld	r24, Y
 11c:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	6b 81       	ldd	r22, Y+3	; 0x03
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	6b 81       	ldd	r22, Y+3	; 0x03
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	6d 81       	ldd	r22, Y+5	; 0x05
 138:	8c 81       	ldd	r24, Y+4	; 0x04
 13a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	6d 81       	ldd	r22, Y+5	; 0x05
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 94 03 	call	0x728	; 0x728 <PWM_INIT>
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 04 	call	0x800	; 0x800 <PWM_START>
 154:	f7 01       	movw	r30, r14
 156:	ee 57       	subi	r30, 0x7E	; 126
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	10 82       	st	Z, r1
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	08 95       	ret

0000016a <MOTOR_Stop>:
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	40 f5       	brcc	.+80     	; 0x1c6 <MOTOR_Stop+0x5c>
 176:	c8 2f       	mov	r28, r24
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	fe 01       	movw	r30, r28
 17c:	ee 57       	subi	r30, 0x7E	; 126
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	11 f1       	breq	.+68     	; 0x1ca <MOTOR_Stop+0x60>
 186:	8e 01       	movw	r16, r28
 188:	00 0f       	add	r16, r16
 18a:	11 1f       	adc	r17, r17
 18c:	0c 0f       	add	r16, r28
 18e:	1d 1f       	adc	r17, r29
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
 194:	08 59       	subi	r16, 0x98	; 152
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	f8 01       	movw	r30, r16
 19c:	61 81       	ldd	r22, Z+1	; 0x01
 19e:	80 81       	ld	r24, Z
 1a0:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	f8 01       	movw	r30, r16
 1a8:	63 81       	ldd	r22, Z+3	; 0x03
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
 1ac:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	f8 01       	movw	r30, r16
 1b4:	65 81       	ldd	r22, Z+5	; 0x05
 1b6:	84 81       	ldd	r24, Z+4	; 0x04
 1b8:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 1bc:	ce 57       	subi	r28, 0x7E	; 126
 1be:	df 4f       	sbci	r29, 0xFF	; 255
 1c0:	18 82       	st	Y, r1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <MOTOR_Stop+0x62>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <MOTOR_Stop+0x62>
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <MOTOR_Start>:
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <MOTOR_Start+0x12>
 1e6:	75 c0       	rjmp	.+234    	; 0x2d2 <MOTOR_Start+0xfc>
 1e8:	8b 01       	movw	r16, r22
 1ea:	c8 2f       	mov	r28, r24
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	fe 01       	movw	r30, r28
 1f0:	ee 57       	subi	r30, 0x7E	; 126
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 81       	ld	r24, Z
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <MOTOR_Start+0x26>
 1fa:	4c c0       	rjmp	.+152    	; 0x294 <MOTOR_Start+0xbe>
 1fc:	fe 01       	movw	r30, r28
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ec 0f       	add	r30, r28
 204:	fd 1f       	adc	r31, r29
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	e8 59       	subi	r30, 0x98	; 152
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	61 81       	ldd	r22, Z+1	; 0x01
 212:	80 81       	ld	r24, Z
 214:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 218:	fe 01       	movw	r30, r28
 21a:	ec 57       	subi	r30, 0x7C	; 124
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	81 11       	cpse	r24, r1
 222:	19 c0       	rjmp	.+50     	; 0x256 <MOTOR_Start+0x80>
 224:	7e 01       	movw	r14, r28
 226:	ee 0c       	add	r14, r14
 228:	ff 1c       	adc	r15, r15
 22a:	ec 0e       	add	r14, r28
 22c:	fd 1e       	adc	r15, r29
 22e:	c7 01       	movw	r24, r14
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	9c 01       	movw	r18, r24
 236:	28 59       	subi	r18, 0x98	; 152
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	79 01       	movw	r14, r18
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	65 81       	ldd	r22, Z+5	; 0x05
 242:	84 81       	ldd	r24, Z+4	; 0x04
 244:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	f7 01       	movw	r30, r14
 24c:	63 81       	ldd	r22, Z+3	; 0x03
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 254:	18 c0       	rjmp	.+48     	; 0x286 <MOTOR_Start+0xb0>
 256:	7e 01       	movw	r14, r28
 258:	ee 0c       	add	r14, r14
 25a:	ff 1c       	adc	r15, r15
 25c:	ec 0e       	add	r14, r28
 25e:	fd 1e       	adc	r15, r29
 260:	c7 01       	movw	r24, r14
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	9c 01       	movw	r18, r24
 268:	28 59       	subi	r18, 0x98	; 152
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	79 01       	movw	r14, r18
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	63 81       	ldd	r22, Z+3	; 0x03
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	f7 01       	movw	r30, r14
 27e:	65 81       	ldd	r22, Z+5	; 0x05
 280:	84 81       	ldd	r24, Z+4	; 0x04
 282:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_writePinValue>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	fe 01       	movw	r30, r28
 28a:	ee 57       	subi	r30, 0x7E	; 126
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	80 83       	st	Z, r24
 290:	f1 2c       	mov	r15, r1
 292:	03 c0       	rjmp	.+6      	; 0x29a <MOTOR_Start+0xc4>
 294:	68 94       	set
 296:	ff 24       	eor	r15, r15
 298:	f2 f8       	bld	r15, 2
 29a:	ce 01       	movw	r24, r28
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	fc 01       	movw	r30, r24
 2a2:	ec 0f       	add	r30, r28
 2a4:	fd 1f       	adc	r31, r29
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e8 59       	subi	r30, 0x98	; 152
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	20 81       	ld	r18, Z
 2b0:	f8 01       	movw	r30, r16
 2b2:	23 83       	std	Z+3, r18	; 0x03
 2b4:	c8 0f       	add	r28, r24
 2b6:	d9 1f       	adc	r29, r25
 2b8:	cc 0f       	add	r28, r28
 2ba:	dd 1f       	adc	r29, r29
 2bc:	c8 59       	subi	r28, 0x98	; 152
 2be:	df 4f       	sbci	r29, 0xFF	; 255
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	82 83       	std	Z+2, r24	; 0x02
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 00 04 	call	0x800	; 0x800 <PWM_START>
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 1e 04 	call	0x83c	; 0x83c <SET_PWM_DutyCycle>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <MOTOR_Start+0x100>
 2d2:	ff 24       	eor	r15, r15
 2d4:	f3 94       	inc	r15
 2d6:	8f 2d       	mov	r24, r15
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <MOTOR_ACW>:
/**************************************************************************************************
* MOTOR_ACW
***************************************************************************************************/

MOTOR_ERROR_state 		MOTOR_ACW      (Motor_t   num ,STR_PWM_config_t * configurations)
{
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	b0 f4       	brcc	.+44     	; 0x320 <MOTOR_ACW+0x3a>
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		if(Motor_Direction[num] != Motor_ACW)
 2f4:	08 2f       	mov	r16, r24
 2f6:	10 e0       	ldi	r17, 0x00	; 0
 2f8:	f8 01       	movw	r30, r16
 2fa:	ec 57       	subi	r30, 0x7C	; 124
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	90 81       	ld	r25, Z
 300:	91 30       	cpi	r25, 0x01	; 1
 302:	81 f0       	breq	.+32     	; 0x324 <MOTOR_ACW+0x3e>
 304:	7b 01       	movw	r14, r22
		{
			/* 1. stop the motor */
			MOTOR_Stop (num);
 306:	0e 94 b5 00 	call	0x16a	; 0x16a <MOTOR_Stop>
			
			/* 2. store the state for the next restart */
			Motor_Direction[num] = Motor_ACW;
 30a:	f8 01       	movw	r30, r16
 30c:	ec 57       	subi	r30, 0x7C	; 124
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
			
			/* 3. stop the motor */
			MOTOR_Start(num , configurations);
 314:	b7 01       	movw	r22, r14
 316:	80 2f       	mov	r24, r16
 318:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <MOTOR_Start>
* MOTOR_ACW
***************************************************************************************************/

MOTOR_ERROR_state 		MOTOR_ACW      (Motor_t   num ,STR_PWM_config_t * configurations)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	03 c0       	rjmp	.+6      	; 0x326 <MOTOR_ACW+0x40>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	01 c0       	rjmp	.+2      	; 0x326 <MOTOR_ACW+0x40>
			/* 3. stop the motor */
			MOTOR_Start(num , configurations);
		}
		else
		{
			return_value = MOTOR_Dir_ACW;
 324:	80 e2       	ldi	r24, 0x20	; 32
		}
	}
	return return_value;
}
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <main>:




int main(void)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	00 d0       	rcall	.+0      	; 0x338 <main+0x6>
 338:	00 d0       	rcall	.+0      	; 0x33a <main+0x8>
 33a:	00 d0       	rcall	.+0      	; 0x33c <main+0xa>
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	
	STR_PWM_config_t  configurations =	{.DutyCycle = 0 ,.Freq = 0x03 ,.TIMInstance = TIMER_0 ,.PWMCh.PinNum = PIN0 , .PWMCh.PortNum = PORTa};
 340:	19 82       	std	Y+1, r1	; 0x01
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	1b 82       	std	Y+3, r1	; 0x03
 348:	1c 82       	std	Y+4, r1	; 0x04
 34a:	1d 82       	std	Y+5, r1	; 0x05

	uint8_t State =0 ;
	
	BUTTON_init();
 34c:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_init>
	MOTOR_INIT(Motor1 ,&configurations);
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 74 00 	call	0xe8	; 0xe8 <MOTOR_INIT>
	//MOTOR_INIT(Motor2 ,configurations);
	
	uint8_t ButtonStatus = 0 ;
 35c:	1e 82       	std	Y+6, r1	; 0x06
	
	
    while(1)
    {
		BUTTON_READ(0 , &ButtonStatus );
 35e:	be 01       	movw	r22, r28
 360:	6a 5f       	subi	r22, 0xFA	; 250
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 5e 00 	call	0xbc	; 0xbc <BUTTON_READ>
		if(ButtonStatus == 1)
 36c:	8e 81       	ldd	r24, Y+6	; 0x06
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	b1 f7       	brne	.-20     	; 0x35e <main+0x2c>
		{
			configurations.DutyCycle += 10 ;
 372:	8d 81       	ldd	r24, Y+5	; 0x05
 374:	86 5f       	subi	r24, 0xF6	; 246
 376:	8d 83       	std	Y+5, r24	; 0x05
			//_delay_ms(100);
			/* changing motor configuration any where inside while(1)  */
			// change speed
			//PWM_START(&configurations);
			//SET_PWM_DutyCycle(&configurations);
			MOTOR_ACW(Motor1 ,&configurations );
 378:	be 01       	movw	r22, r28
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 73 01 	call	0x2e6	; 0x2e6 <MOTOR_ACW>
			// necessary for apply a new configuration (Speed or Direction)
			MOTOR_Start (Motor1 , &configurations );
 384:	be 01       	movw	r22, r28
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <MOTOR_Start>
			/*************************************************************/
			
			do
			{
				BUTTON_READ(0 , &ButtonStatus );
 390:	be 01       	movw	r22, r28
 392:	6a 5f       	subi	r22, 0xFA	; 250
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 5e 00 	call	0xbc	; 0xbc <BUTTON_READ>
			}while(ButtonStatus == 1);
 39e:	8e 81       	ldd	r24, Y+6	; 0x06
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	b1 f3       	breq	.-20     	; 0x390 <main+0x5e>
 3a4:	dc cf       	rjmp	.-72     	; 0x35e <main+0x2c>

000003a6 <DIO_setPinDirection>:
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
}	  //END of DIO_readPort
 3a6:	68 30       	cpi	r22, 0x08	; 8
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <DIO_setPinDirection+0x6>
 3aa:	78 c0       	rjmp	.+240    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 3ac:	41 30       	cpi	r20, 0x01	; 1
 3ae:	c1 f5       	brne	.+112    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	91 f0       	breq	.+36     	; 0x3d8 <DIO_setPinDirection+0x32>
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <DIO_setPinDirection+0x1a>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	d9 f0       	breq	.+54     	; 0x3f0 <DIO_setPinDirection+0x4a>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	29 f1       	breq	.+74     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3be:	70 c0       	rjmp	.+224    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 3c0:	2a b3       	in	r18, 0x1a	; 26
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_setPinDirection+0x26>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_setPinDirection+0x22>
 3d0:	82 2b       	or	r24, r18
 3d2:	8a bb       	out	0x1a, r24	; 26
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
 3d8:	27 b3       	in	r18, 0x17	; 23
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_setPinDirection+0x3e>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_setPinDirection+0x3a>
 3e8:	82 2b       	or	r24, r18
 3ea:	87 bb       	out	0x17, r24	; 23
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	24 b3       	in	r18, 0x14	; 20
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_setPinDirection+0x56>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_setPinDirection+0x52>
 400:	82 2b       	or	r24, r18
 402:	84 bb       	out	0x14, r24	; 20
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
 408:	21 b3       	in	r18, 0x11	; 17
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	82 2b       	or	r24, r18
 41a:	81 bb       	out	0x11, r24	; 17
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	41 11       	cpse	r20, r1
 422:	40 c0       	rjmp	.+128    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	99 f0       	breq	.+38     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 428:	28 f0       	brcs	.+10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	e9 f0       	breq	.+58     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	41 f1       	breq	.+80     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 432:	3a c0       	rjmp	.+116    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 434:	2a b3       	in	r18, 0x1a	; 26
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	8a bb       	out	0x1a, r24	; 26
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
 44e:	27 b3       	in	r18, 0x17	; 23
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	87 bb       	out	0x17, r24	; 23
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret
 468:	24 b3       	in	r18, 0x14	; 20
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	80 95       	com	r24
 47a:	82 23       	and	r24, r18
 47c:	84 bb       	out	0x14, r24	; 20
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
 482:	21 b3       	in	r18, 0x11	; 17
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	80 95       	com	r24
 494:	82 23       	and	r24, r18
 496:	81 bb       	out	0x11, r24	; 17
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	08 95       	ret
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	08 95       	ret
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	08 95       	ret

000004ac <DIO_writePinValue>:
 4ac:	68 30       	cpi	r22, 0x08	; 8
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <DIO_writePinValue+0x6>
 4b0:	78 c0       	rjmp	.+240    	; 0x5a2 <DIO_writePinValue+0xf6>
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	c1 f5       	brne	.+112    	; 0x526 <DIO_writePinValue+0x7a>
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	91 f0       	breq	.+36     	; 0x4de <DIO_writePinValue+0x32>
 4ba:	28 f0       	brcs	.+10     	; 0x4c6 <DIO_writePinValue+0x1a>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	d9 f0       	breq	.+54     	; 0x4f6 <DIO_writePinValue+0x4a>
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	29 f1       	breq	.+74     	; 0x50e <DIO_writePinValue+0x62>
 4c4:	70 c0       	rjmp	.+224    	; 0x5a6 <DIO_writePinValue+0xfa>
 4c6:	2b b3       	in	r18, 0x1b	; 27
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_writePinValue+0x26>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_writePinValue+0x22>
 4d6:	82 2b       	or	r24, r18
 4d8:	8b bb       	out	0x1b, r24	; 27
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	28 b3       	in	r18, 0x18	; 24
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_writePinValue+0x3e>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_writePinValue+0x3a>
 4ee:	82 2b       	or	r24, r18
 4f0:	88 bb       	out	0x18, r24	; 24
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	25 b3       	in	r18, 0x15	; 21
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_writePinValue+0x56>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_writePinValue+0x52>
 506:	82 2b       	or	r24, r18
 508:	85 bb       	out	0x15, r24	; 21
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
 50e:	22 b3       	in	r18, 0x12	; 18
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_writePinValue+0x6e>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_writePinValue+0x6a>
 51e:	82 2b       	or	r24, r18
 520:	82 bb       	out	0x12, r24	; 18
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
 526:	41 11       	cpse	r20, r1
 528:	40 c0       	rjmp	.+128    	; 0x5aa <DIO_writePinValue+0xfe>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	99 f0       	breq	.+38     	; 0x554 <DIO_writePinValue+0xa8>
 52e:	28 f0       	brcs	.+10     	; 0x53a <DIO_writePinValue+0x8e>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	e9 f0       	breq	.+58     	; 0x56e <DIO_writePinValue+0xc2>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	41 f1       	breq	.+80     	; 0x588 <DIO_writePinValue+0xdc>
 538:	3a c0       	rjmp	.+116    	; 0x5ae <DIO_writePinValue+0x102>
 53a:	2b b3       	in	r18, 0x1b	; 27
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_writePinValue+0x9a>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_writePinValue+0x96>
 54a:	80 95       	com	r24
 54c:	82 23       	and	r24, r18
 54e:	8b bb       	out	0x1b, r24	; 27
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
 554:	28 b3       	in	r18, 0x18	; 24
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_writePinValue+0xb4>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_writePinValue+0xb0>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	88 bb       	out	0x18, r24	; 24
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
 56e:	25 b3       	in	r18, 0x15	; 21
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_writePinValue+0xce>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_writePinValue+0xca>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	85 bb       	out	0x15, r24	; 21
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
 588:	22 b3       	in	r18, 0x12	; 18
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_writePinValue+0xe8>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_writePinValue+0xe4>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	82 bb       	out	0x12, r24	; 18
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	08 95       	ret
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	08 95       	ret
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	08 95       	ret

000005b2 <DIO_readPin>:
/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
 5b2:	41 15       	cp	r20, r1
 5b4:	51 05       	cpc	r21, r1
 5b6:	d1 f1       	breq	.+116    	; 0x62c <DIO_readPin+0x7a>
        u8_ERROR_STAT = ERROR_NOK;
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 5b8:	68 30       	cpi	r22, 0x08	; 8
 5ba:	d0 f5       	brcc	.+116    	; 0x630 <DIO_readPin+0x7e>
        {
            switch (PortID)
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	91 f0       	breq	.+36     	; 0x5e4 <DIO_readPin+0x32>
 5c0:	28 f0       	brcs	.+10     	; 0x5cc <DIO_readPin+0x1a>
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	d9 f0       	breq	.+54     	; 0x5fc <DIO_readPin+0x4a>
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	29 f1       	breq	.+74     	; 0x614 <DIO_readPin+0x62>
 5ca:	34 c0       	rjmp	.+104    	; 0x634 <DIO_readPin+0x82>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
 5cc:	89 b3       	in	r24, 0x19	; 25
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_readPin+0x24>
 5d2:	95 95       	asr	r25
 5d4:	87 95       	ror	r24
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_readPin+0x20>
 5da:	81 70       	andi	r24, 0x01	; 1
 5dc:	fa 01       	movw	r30, r20
 5de:	80 83       	st	Z, r24
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
        {
            switch (PortID)
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
                break;
 5e2:	08 95       	ret
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
 5e4:	86 b3       	in	r24, 0x16	; 22
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_readPin+0x3c>
 5ea:	95 95       	asr	r25
 5ec:	87 95       	ror	r24
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_readPin+0x38>
 5f2:	81 70       	andi	r24, 0x01	; 1
 5f4:	fa 01       	movw	r30, r20
 5f6:	80 83       	st	Z, r24
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 5f8:	80 e0       	ldi	r24, 0x00	; 0
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
                break;
 5fa:	08 95       	ret
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
 5fc:	83 b3       	in	r24, 0x13	; 19
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_readPin+0x54>
 602:	95 95       	asr	r25
 604:	87 95       	ror	r24
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_readPin+0x50>
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	fa 01       	movw	r30, r20
 60e:	80 83       	st	Z, r24
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 610:	80 e0       	ldi	r24, 0x00	; 0
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
                break;
 612:	08 95       	ret
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
 614:	80 b3       	in	r24, 0x10	; 16
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_readPin+0x6c>
 61a:	95 95       	asr	r25
 61c:	87 95       	ror	r24
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_readPin+0x68>
 622:	81 70       	andi	r24, 0x01	; 1
 624:	fa 01       	movw	r30, r20
 626:	80 83       	st	Z, r24
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 628:	80 e0       	ldi	r24, 0x00	; 0
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
                break;
 62a:	08 95       	ret
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
    {
        u8_ERROR_STAT = ERROR_NOK;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 634:	81 e0       	ldi	r24, 0x01	; 1
        {
            u8_ERROR_STAT = ERROR_NOK;
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
}    //END of DIO_readPint
 636:	08 95       	ret

00000638 <DIO_TogglePin>:
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 638:	68 30       	cpi	r22, 0x08	; 8
 63a:	c0 f5       	brcc	.+112    	; 0x6ac <DIO_TogglePin+0x74>
    {
        switch (PortID)
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	91 f0       	breq	.+36     	; 0x664 <DIO_TogglePin+0x2c>
 640:	28 f0       	brcs	.+10     	; 0x64c <DIO_TogglePin+0x14>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	d9 f0       	breq	.+54     	; 0x67c <DIO_TogglePin+0x44>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	29 f1       	breq	.+74     	; 0x694 <DIO_TogglePin+0x5c>
 64a:	32 c0       	rjmp	.+100    	; 0x6b0 <DIO_TogglePin+0x78>
        {
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
 64c:	2b b3       	in	r18, 0x1b	; 27
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_TogglePin+0x20>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_TogglePin+0x1c>
 65c:	82 27       	eor	r24, r18
 65e:	8b bb       	out	0x1b, r24	; 27
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 660:	80 e0       	ldi	r24, 0x00	; 0
    {
        switch (PortID)
        {
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
            break;
 662:	08 95       	ret
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
 664:	28 b3       	in	r18, 0x18	; 24
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_TogglePin+0x38>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_TogglePin+0x34>
 674:	82 27       	eor	r24, r18
 676:	88 bb       	out	0x18, r24	; 24
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 678:	80 e0       	ldi	r24, 0x00	; 0
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
            break;
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
            break;
 67a:	08 95       	ret
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
 67c:	25 b3       	in	r18, 0x15	; 21
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_TogglePin+0x50>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_TogglePin+0x4c>
 68c:	82 27       	eor	r24, r18
 68e:	85 bb       	out	0x15, r24	; 21
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 690:	80 e0       	ldi	r24, 0x00	; 0
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
            break;
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
            break;
 692:	08 95       	ret
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
 694:	22 b3       	in	r18, 0x12	; 18
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_TogglePin+0x68>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_TogglePin+0x64>
 6a4:	82 27       	eor	r24, r18
 6a6:	82 bb       	out	0x12, r24	; 18
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
            break;
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
            break;
 6aa:	08 95       	ret
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	08 95       	ret
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
 6b2:	08 95       	ret

000006b4 <GPIO_TOGGLE_TIM0>:
{
	
	
	
		return TIM_OK ;
}
 6b4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ON.2166>
 6b8:	81 11       	cpse	r24, r1
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <GPIO_TOGGLE_TIM0+0x16>
 6bc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <Duty_TIM0>
 6c0:	8c bf       	out	0x3c, r24	; 60
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ON.2166>
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <GPIO_TOGGLE_TIM0+0x24>
 6ca:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Duty_TIM0>
 6ce:	8e ef       	ldi	r24, 0xFE	; 254
 6d0:	89 1b       	sub	r24, r25
 6d2:	8c bf       	out	0x3c, r24	; 60
 6d4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ON.2166>
 6d8:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <Duty_TIM0>
 6dc:	88 23       	and	r24, r24
 6de:	31 f0       	breq	.+12     	; 0x6ec <GPIO_TOGGLE_TIM0+0x38>
 6e0:	ef e8       	ldi	r30, 0x8F	; 143
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	62 81       	ldd	r22, Z+2	; 0x02
 6e6:	83 81       	ldd	r24, Z+3	; 0x03
 6e8:	0e 94 1c 03 	call	0x638	; 0x638 <DIO_TogglePin>
 6ec:	08 95       	ret

000006ee <GPIO_TOGGLE_TIM2>:
 6ee:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Duty_TIM2>
 6f2:	88 23       	and	r24, r24
 6f4:	31 f0       	breq	.+12     	; 0x702 <GPIO_TOGGLE_TIM2+0x14>
 6f6:	ea e8       	ldi	r30, 0x8A	; 138
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	62 81       	ldd	r22, Z+2	; 0x02
 6fc:	83 81       	ldd	r24, Z+3	; 0x03
 6fe:	0e 94 1c 03 	call	0x638	; 0x638 <DIO_TogglePin>
 702:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <ON.2170>
 706:	81 11       	cpse	r24, r1
 708:	07 c0       	rjmp	.+14     	; 0x718 <GPIO_TOGGLE_TIM2+0x2a>
 70a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Duty_TIM2>
 70e:	83 bd       	out	0x23, r24	; 35
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <ON.2170>
 716:	08 95       	ret
 718:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <Duty_TIM2>
 71c:	8e ef       	ldi	r24, 0xFE	; 254
 71e:	89 1b       	sub	r24, r25
 720:	83 bd       	out	0x23, r24	; 35
 722:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <ON.2170>
 726:	08 95       	ret

00000728 <PWM_INIT>:
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	09 f4       	brne	.+2      	; 0x732 <PWM_INIT+0xa>
 730:	5d c0       	rjmp	.+186    	; 0x7ec <PWM_INIT+0xc4>
 732:	ec 01       	movw	r28, r24
 734:	88 81       	ld	r24, Y
 736:	81 11       	cpse	r24, r1
 738:	2d c0       	rjmp	.+90     	; 0x794 <PWM_INIT+0x6c>
 73a:	2c 81       	ldd	r18, Y+4	; 0x04
 73c:	ef e8       	ldi	r30, 0x8F	; 143
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	24 83       	std	Z+4, r18	; 0x04
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	82 83       	std	Z+2, r24	; 0x02
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	83 83       	std	Z+3, r24	; 0x03
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	af ef       	ldi	r26, 0xFF	; 255
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 754:	24 e6       	ldi	r18, 0x64	; 100
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodsi4>
 760:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <Duty_TIM0>
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	eb e7       	ldi	r30, 0x7B	; 123
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	86 83       	std	Z+6, r24	; 0x06
 76c:	88 81       	ld	r24, Y
 76e:	84 83       	std	Z+4, r24	; 0x04
 770:	cf 01       	movw	r24, r30
 772:	0e 94 36 05 	call	0xa6c	; 0xa6c <TIMER_init>
 776:	81 11       	cpse	r24, r1
 778:	3b c0       	rjmp	.+118    	; 0x7f0 <PWM_INIT+0xc8>
 77a:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <PWM_TIMConfig_TIM0+0x4>
 77e:	8a e5       	ldi	r24, 0x5A	; 90
 780:	93 e0       	ldi	r25, 0x03	; 3
 782:	0e 94 a2 05 	call	0xb44	; 0xb44 <TIMER_setCallBack>
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	6a 81       	ldd	r22, Y+2	; 0x02
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	33 c0       	rjmp	.+102    	; 0x7fa <PWM_INIT+0xd2>
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	71 f5       	brne	.+92     	; 0x7f4 <PWM_INIT+0xcc>
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	ea e8       	ldi	r30, 0x8A	; 138
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	84 83       	std	Z+4, r24	; 0x04
 7a0:	9a 81       	ldd	r25, Y+2	; 0x02
 7a2:	92 83       	std	Z+2, r25	; 0x02
 7a4:	9b 81       	ldd	r25, Y+3	; 0x03
 7a6:	93 83       	std	Z+3, r25	; 0x03
 7a8:	2f ef       	ldi	r18, 0xFF	; 255
 7aa:	82 9f       	mul	r24, r18
 7ac:	c0 01       	movw	r24, r0
 7ae:	11 24       	eor	r1, r1
 7b0:	64 e6       	ldi	r22, 0x64	; 100
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
 7b8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <Duty_TIM2>
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	e4 e7       	ldi	r30, 0x74	; 116
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	86 83       	std	Z+6, r24	; 0x06
 7c4:	88 81       	ld	r24, Y
 7c6:	84 83       	std	Z+4, r24	; 0x04
 7c8:	cf 01       	movw	r24, r30
 7ca:	0e 94 36 05 	call	0xa6c	; 0xa6c <TIMER_init>
 7ce:	81 11       	cpse	r24, r1
 7d0:	13 c0       	rjmp	.+38     	; 0x7f8 <PWM_INIT+0xd0>
 7d2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <PWM_TIMConfig_TIM2+0x4>
 7d6:	87 e7       	ldi	r24, 0x77	; 119
 7d8:	93 e0       	ldi	r25, 0x03	; 3
 7da:	0e 94 a2 05 	call	0xb44	; 0xb44 <TIMER_setCallBack>
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	6a 81       	ldd	r22, Y+2	; 0x02
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_setPinDirection>
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	07 c0       	rjmp	.+14     	; 0x7fa <PWM_INIT+0xd2>
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <PWM_INIT+0xd2>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <PWM_INIT+0xd2>
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <PWM_INIT+0xd2>
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <PWM_START>:
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	b1 f0       	breq	.+44     	; 0x830 <PWM_START+0x30>
 804:	fc 01       	movw	r30, r24
 806:	80 81       	ld	r24, Z
 808:	81 11       	cpse	r24, r1
 80a:	07 c0       	rjmp	.+14     	; 0x81a <PWM_START+0x1a>
 80c:	8b e7       	ldi	r24, 0x7B	; 123
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TIMER_start>
 814:	88 23       	and	r24, r24
 816:	49 f0       	breq	.+18     	; 0x82a <PWM_START+0x2a>
 818:	0d c0       	rjmp	.+26     	; 0x834 <PWM_START+0x34>
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	31 f4       	brne	.+12     	; 0x82a <PWM_START+0x2a>
 81e:	84 e7       	ldi	r24, 0x74	; 116
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TIMER_start>
 826:	81 11       	cpse	r24, r1
 828:	07 c0       	rjmp	.+14     	; 0x838 <PWM_START+0x38>
 82a:	78 94       	sei
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	08 95       	ret
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	08 95       	ret
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	08 95       	ret
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	08 95       	ret

0000083c <SET_PWM_DutyCycle>:


PWM_ERROR_state_t SET_PWM_DutyCycle (const STR_PWM_config_t * configurations)
{
	
	cli();
 83c:	f8 94       	cli

		if(configurations->TIMInstance == TIMER_0 )
 83e:	fc 01       	movw	r30, r24
 840:	20 81       	ld	r18, Z
 842:	21 11       	cpse	r18, r1
 844:	0c c0       	rjmp	.+24     	; 0x85e <SET_PWM_DutyCycle+0x22>
		{
			Duty_TIM0 = (255 * configurations->DutyCycle)/100  ;
 846:	84 81       	ldd	r24, Z+4	; 0x04
 848:	ff ef       	ldi	r31, 0xFF	; 255
 84a:	8f 9f       	mul	r24, r31
 84c:	c0 01       	movw	r24, r0
 84e:	11 24       	eor	r1, r1
 850:	64 e6       	ldi	r22, 0x64	; 100
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
 858:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <Duty_TIM0>
 85c:	0e c0       	rjmp	.+28     	; 0x87a <__stack+0x1b>
			
		}else if(configurations->TIMInstance == TIMER_2 )
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	61 f4       	brne	.+24     	; 0x87a <__stack+0x1b>
		{
			
			Duty_TIM2 = (255 * configurations->DutyCycle)/100  ;
 862:	fc 01       	movw	r30, r24
 864:	84 81       	ldd	r24, Z+4	; 0x04
 866:	ff ef       	ldi	r31, 0xFF	; 255
 868:	8f 9f       	mul	r24, r31
 86a:	c0 01       	movw	r24, r0
 86c:	11 24       	eor	r1, r1
 86e:	64 e6       	ldi	r22, 0x64	; 100
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
 876:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <Duty_TIM2>
						
		}
	sei();
 87a:	78 94       	sei
	return TIM_OK ;
	
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	08 95       	ret

00000880 <__vector_11>:
		/* Update the error state with error */
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
		break;
	}
	return u8_ERROR_STAT;
}
 880:	1f 92       	push	r1
 882:	0f 92       	push	r0
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	0f 92       	push	r0
 888:	11 24       	eor	r1, r1
 88a:	2f 93       	push	r18
 88c:	3f 93       	push	r19
 88e:	4f 93       	push	r20
 890:	5f 93       	push	r21
 892:	6f 93       	push	r22
 894:	7f 93       	push	r23
 896:	8f 93       	push	r24
 898:	9f 93       	push	r25
 89a:	af 93       	push	r26
 89c:	bf 93       	push	r27
 89e:	ef 93       	push	r30
 8a0:	ff 93       	push	r31
 8a2:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <g_callBackPtrTimer0>
 8a6:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <g_callBackPtrTimer0+0x1>
 8aa:	30 97       	sbiw	r30, 0x00	; 0
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__vector_11+0x30>
 8ae:	09 95       	icall
 8b0:	ff 91       	pop	r31
 8b2:	ef 91       	pop	r30
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	7f 91       	pop	r23
 8be:	6f 91       	pop	r22
 8c0:	5f 91       	pop	r21
 8c2:	4f 91       	pop	r20
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	0f 90       	pop	r0
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	0f 90       	pop	r0
 8ce:	1f 90       	pop	r1
 8d0:	18 95       	reti

000008d2 <__vector_10>:
 8d2:	1f 92       	push	r1
 8d4:	0f 92       	push	r0
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	0f 92       	push	r0
 8da:	11 24       	eor	r1, r1
 8dc:	2f 93       	push	r18
 8de:	3f 93       	push	r19
 8e0:	4f 93       	push	r20
 8e2:	5f 93       	push	r21
 8e4:	6f 93       	push	r22
 8e6:	7f 93       	push	r23
 8e8:	8f 93       	push	r24
 8ea:	9f 93       	push	r25
 8ec:	af 93       	push	r26
 8ee:	bf 93       	push	r27
 8f0:	ef 93       	push	r30
 8f2:	ff 93       	push	r31
 8f4:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <g_callBackPtrTimer0>
 8f8:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <g_callBackPtrTimer0+0x1>
 8fc:	30 97       	sbiw	r30, 0x00	; 0
 8fe:	09 f0       	breq	.+2      	; 0x902 <__vector_10+0x30>
 900:	09 95       	icall
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__vector_9>:
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	0f 92       	push	r0
 92c:	11 24       	eor	r1, r1
 92e:	2f 93       	push	r18
 930:	3f 93       	push	r19
 932:	4f 93       	push	r20
 934:	5f 93       	push	r21
 936:	6f 93       	push	r22
 938:	7f 93       	push	r23
 93a:	8f 93       	push	r24
 93c:	9f 93       	push	r25
 93e:	af 93       	push	r26
 940:	bf 93       	push	r27
 942:	ef 93       	push	r30
 944:	ff 93       	push	r31
 946:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <g_callBackPtrTimer1>
 94a:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <g_callBackPtrTimer1+0x1>
 94e:	30 97       	sbiw	r30, 0x00	; 0
 950:	09 f0       	breq	.+2      	; 0x954 <__vector_9+0x30>
 952:	09 95       	icall
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <__vector_7>:
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	2f 93       	push	r18
 982:	3f 93       	push	r19
 984:	4f 93       	push	r20
 986:	5f 93       	push	r21
 988:	6f 93       	push	r22
 98a:	7f 93       	push	r23
 98c:	8f 93       	push	r24
 98e:	9f 93       	push	r25
 990:	af 93       	push	r26
 992:	bf 93       	push	r27
 994:	ef 93       	push	r30
 996:	ff 93       	push	r31
 998:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <g_callBackPtrTimer1>
 99c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <g_callBackPtrTimer1+0x1>
 9a0:	30 97       	sbiw	r30, 0x00	; 0
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__vector_7+0x30>
 9a4:	09 95       	icall
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <__vector_5>:
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31
 9ea:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <g_callBackPtrTimer2>
 9ee:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <g_callBackPtrTimer2+0x1>
 9f2:	30 97       	sbiw	r30, 0x00	; 0
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_5+0x30>
 9f6:	09 95       	icall
 9f8:	ff 91       	pop	r31
 9fa:	ef 91       	pop	r30
 9fc:	bf 91       	pop	r27
 9fe:	af 91       	pop	r26
 a00:	9f 91       	pop	r25
 a02:	8f 91       	pop	r24
 a04:	7f 91       	pop	r23
 a06:	6f 91       	pop	r22
 a08:	5f 91       	pop	r21
 a0a:	4f 91       	pop	r20
 a0c:	3f 91       	pop	r19
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <__vector_4>:
 a1a:	1f 92       	push	r1
 a1c:	0f 92       	push	r0
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	0f 92       	push	r0
 a22:	11 24       	eor	r1, r1
 a24:	2f 93       	push	r18
 a26:	3f 93       	push	r19
 a28:	4f 93       	push	r20
 a2a:	5f 93       	push	r21
 a2c:	6f 93       	push	r22
 a2e:	7f 93       	push	r23
 a30:	8f 93       	push	r24
 a32:	9f 93       	push	r25
 a34:	af 93       	push	r26
 a36:	bf 93       	push	r27
 a38:	ef 93       	push	r30
 a3a:	ff 93       	push	r31
 a3c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <g_callBackPtrTimer2>
 a40:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <g_callBackPtrTimer2+0x1>
 a44:	30 97       	sbiw	r30, 0x00	; 0
 a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_4+0x30>
 a48:	09 95       	icall
 a4a:	ff 91       	pop	r31
 a4c:	ef 91       	pop	r30
 a4e:	bf 91       	pop	r27
 a50:	af 91       	pop	r26
 a52:	9f 91       	pop	r25
 a54:	8f 91       	pop	r24
 a56:	7f 91       	pop	r23
 a58:	6f 91       	pop	r22
 a5a:	5f 91       	pop	r21
 a5c:	4f 91       	pop	r20
 a5e:	3f 91       	pop	r19
 a60:	2f 91       	pop	r18
 a62:	0f 90       	pop	r0
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	0f 90       	pop	r0
 a68:	1f 90       	pop	r1
 a6a:	18 95       	reti

00000a6c <TIMER_init>:
 a6c:	fc 01       	movw	r30, r24
 a6e:	84 81       	ldd	r24, Z+4	; 0x04
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	01 f1       	breq	.+64     	; 0xab4 <TIMER_init+0x48>
 a74:	20 f0       	brcs	.+8      	; 0xa7e <TIMER_init+0x12>
 a76:	82 30       	cpi	r24, 0x02	; 2
 a78:	09 f4       	brne	.+2      	; 0xa7c <TIMER_init+0x10>
 a7a:	41 c0       	rjmp	.+130    	; 0xafe <TIMER_init+0x92>
 a7c:	5b c0       	rjmp	.+182    	; 0xb34 <TIMER_init+0xc8>
 a7e:	12 be       	out	0x32, r1	; 50
 a80:	13 be       	out	0x33, r1	; 51
 a82:	1c be       	out	0x3c, r1	; 60
 a84:	80 81       	ld	r24, Z
 a86:	82 bf       	out	0x32, r24	; 50
 a88:	85 81       	ldd	r24, Z+5	; 0x05
 a8a:	88 23       	and	r24, r24
 a8c:	19 f0       	breq	.+6      	; 0xa94 <TIMER_init+0x28>
 a8e:	81 30       	cpi	r24, 0x01	; 1
 a90:	41 f0       	breq	.+16     	; 0xaa2 <TIMER_init+0x36>
 a92:	52 c0       	rjmp	.+164    	; 0xb38 <TIMER_init+0xcc>
 a94:	80 e8       	ldi	r24, 0x80	; 128
 a96:	83 bf       	out	0x33, r24	; 51
 a98:	89 b7       	in	r24, 0x39	; 57
 a9a:	81 60       	ori	r24, 0x01	; 1
 a9c:	89 bf       	out	0x39, r24	; 57
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	08 95       	ret
 aa2:	82 81       	ldd	r24, Z+2	; 0x02
 aa4:	8c bf       	out	0x3c, r24	; 60
 aa6:	88 e8       	ldi	r24, 0x88	; 136
 aa8:	83 bf       	out	0x33, r24	; 51
 aaa:	89 b7       	in	r24, 0x39	; 57
 aac:	82 60       	ori	r24, 0x02	; 2
 aae:	89 bf       	out	0x39, r24	; 57
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	08 95       	ret
 ab4:	1d bc       	out	0x2d, r1	; 45
 ab6:	1c bc       	out	0x2c, r1	; 44
 ab8:	1b bc       	out	0x2b, r1	; 43
 aba:	1a bc       	out	0x2a, r1	; 42
 abc:	1f bc       	out	0x2f, r1	; 47
 abe:	1e bc       	out	0x2e, r1	; 46
 ac0:	80 81       	ld	r24, Z
 ac2:	91 81       	ldd	r25, Z+1	; 0x01
 ac4:	9d bd       	out	0x2d, r25	; 45
 ac6:	8c bd       	out	0x2c, r24	; 44
 ac8:	85 81       	ldd	r24, Z+5	; 0x05
 aca:	88 23       	and	r24, r24
 acc:	19 f0       	breq	.+6      	; 0xad4 <TIMER_init+0x68>
 ace:	81 30       	cpi	r24, 0x01	; 1
 ad0:	41 f0       	breq	.+16     	; 0xae2 <TIMER_init+0x76>
 ad2:	34 c0       	rjmp	.+104    	; 0xb3c <TIMER_init+0xd0>
 ad4:	8c e0       	ldi	r24, 0x0C	; 12
 ad6:	8f bd       	out	0x2f, r24	; 47
 ad8:	89 b7       	in	r24, 0x39	; 57
 ada:	84 60       	ori	r24, 0x04	; 4
 adc:	89 bf       	out	0x39, r24	; 57
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	08 95       	ret
 ae2:	82 81       	ldd	r24, Z+2	; 0x02
 ae4:	93 81       	ldd	r25, Z+3	; 0x03
 ae6:	9b bd       	out	0x2b, r25	; 43
 ae8:	8a bd       	out	0x2a, r24	; 42
 aea:	8c e0       	ldi	r24, 0x0C	; 12
 aec:	8f bd       	out	0x2f, r24	; 47
 aee:	8e b5       	in	r24, 0x2e	; 46
 af0:	88 60       	ori	r24, 0x08	; 8
 af2:	8e bd       	out	0x2e, r24	; 46
 af4:	89 b7       	in	r24, 0x39	; 57
 af6:	80 61       	ori	r24, 0x10	; 16
 af8:	89 bf       	out	0x39, r24	; 57
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	08 95       	ret
 afe:	14 bc       	out	0x24, r1	; 36
 b00:	15 bc       	out	0x25, r1	; 37
 b02:	13 bc       	out	0x23, r1	; 35
 b04:	80 81       	ld	r24, Z
 b06:	84 bd       	out	0x24, r24	; 36
 b08:	85 81       	ldd	r24, Z+5	; 0x05
 b0a:	88 23       	and	r24, r24
 b0c:	19 f0       	breq	.+6      	; 0xb14 <TIMER_init+0xa8>
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	41 f0       	breq	.+16     	; 0xb22 <TIMER_init+0xb6>
 b12:	16 c0       	rjmp	.+44     	; 0xb40 <TIMER_init+0xd4>
 b14:	80 e8       	ldi	r24, 0x80	; 128
 b16:	85 bd       	out	0x25, r24	; 37
 b18:	89 b7       	in	r24, 0x39	; 57
 b1a:	80 64       	ori	r24, 0x40	; 64
 b1c:	89 bf       	out	0x39, r24	; 57
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	08 95       	ret
 b22:	82 81       	ldd	r24, Z+2	; 0x02
 b24:	83 bd       	out	0x23, r24	; 35
 b26:	88 e8       	ldi	r24, 0x88	; 136
 b28:	85 bd       	out	0x25, r24	; 37
 b2a:	89 b7       	in	r24, 0x39	; 57
 b2c:	80 68       	ori	r24, 0x80	; 128
 b2e:	89 bf       	out	0x39, r24	; 57
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	08 95       	ret
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	08 95       	ret
 b38:	82 e0       	ldi	r24, 0x02	; 2
 b3a:	08 95       	ret
 b3c:	82 e0       	ldi	r24, 0x02	; 2
 b3e:	08 95       	ret
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	08 95       	ret

00000b44 <TIMER_setCallBack>:
 b44:	61 30       	cpi	r22, 0x01	; 1
 b46:	49 f0       	breq	.+18     	; 0xb5a <TIMER_setCallBack+0x16>
 b48:	18 f0       	brcs	.+6      	; 0xb50 <TIMER_setCallBack+0xc>
 b4a:	62 30       	cpi	r22, 0x02	; 2
 b4c:	59 f0       	breq	.+22     	; 0xb64 <TIMER_setCallBack+0x20>
 b4e:	08 95       	ret
 b50:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <g_callBackPtrTimer0+0x1>
 b54:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <g_callBackPtrTimer0>
 b58:	08 95       	ret
 b5a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <g_callBackPtrTimer1+0x1>
 b5e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <g_callBackPtrTimer1>
 b62:	08 95       	ret
 b64:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <g_callBackPtrTimer2+0x1>
 b68:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <g_callBackPtrTimer2>
 b6c:	08 95       	ret

00000b6e <TIMER_start>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
TIMER_ERROR_STATE TIMER_start(const TIMER_ConfigType * Config_Ptr)
{
 b6e:	fc 01       	movw	r30, r24
	TIMER_ERROR_STATE u8_ERROR_STAT = E_NOT_OK;

	switch(Config_Ptr -> timer_ID)
 b70:	94 81       	ldd	r25, Z+4	; 0x04
 b72:	91 30       	cpi	r25, 0x01	; 1
 b74:	59 f0       	breq	.+22     	; 0xb8c <TIMER_start+0x1e>
 b76:	18 f0       	brcs	.+6      	; 0xb7e <TIMER_start+0x10>
 b78:	92 30       	cpi	r25, 0x02	; 2
 b7a:	79 f0       	breq	.+30     	; 0xb9a <TIMER_start+0x2c>
 b7c:	15 c0       	rjmp	.+42     	; 0xba8 <TIMER_start+0x3a>
	{

	 /* Insert the required Clock in the First three bits (CS02, CS01, CS00) in TCCR0 register */
	case TIMER_0:
		TCCR0  = (TCCR0 & 0xF8) | (Config_Ptr -> timer_Clock);
 b7e:	83 b7       	in	r24, 0x33	; 51
 b80:	88 7f       	andi	r24, 0xF8	; 248
 b82:	96 81       	ldd	r25, Z+6	; 0x06
 b84:	89 2b       	or	r24, r25
 b86:	83 bf       	out	0x33, r24	; 51
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
 b88:	80 e0       	ldi	r24, 0x00	; 0
		break;
 b8a:	08 95       	ret

	/* Insert the required Clock in the First three bits (CS12, CS11, CS10) in TCCR1B register */
	case TIMER_1:
		TCCR1B  = (TCCR1B & 0xF8) | (Config_Ptr -> timer_Clock);
 b8c:	8e b5       	in	r24, 0x2e	; 46
 b8e:	88 7f       	andi	r24, 0xF8	; 248
 b90:	96 81       	ldd	r25, Z+6	; 0x06
 b92:	89 2b       	or	r24, r25
 b94:	8e bd       	out	0x2e, r24	; 46
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
 b96:	80 e0       	ldi	r24, 0x00	; 0
		break;
 b98:	08 95       	ret

	/* Insert the required Clock in the First three bits (CS22, CS21, CS20) in TCCR2 register */
	case TIMER_2:
		TCCR2  = (TCCR2 & 0xF8) | (Config_Ptr -> timer_Clock);
 b9a:	85 b5       	in	r24, 0x25	; 37
 b9c:	88 7f       	andi	r24, 0xF8	; 248
 b9e:	96 81       	ldd	r25, Z+6	; 0x06
 ba0:	89 2b       	or	r24, r25
 ba2:	85 bd       	out	0x25, r24	; 37
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
 ba4:	80 e0       	ldi	r24, 0x00	; 0
		break;
 ba6:	08 95       	ret

	default:
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return u8_ERROR_STAT;
}
 baa:	08 95       	ret

00000bac <__divmodhi4>:
 bac:	97 fb       	bst	r25, 7
 bae:	07 2e       	mov	r0, r23
 bb0:	16 f4       	brtc	.+4      	; 0xbb6 <__divmodhi4+0xa>
 bb2:	00 94       	com	r0
 bb4:	07 d0       	rcall	.+14     	; 0xbc4 <__divmodhi4_neg1>
 bb6:	77 fd       	sbrc	r23, 7
 bb8:	09 d0       	rcall	.+18     	; 0xbcc <__divmodhi4_neg2>
 bba:	0e 94 1b 06 	call	0xc36	; 0xc36 <__udivmodhi4>
 bbe:	07 fc       	sbrc	r0, 7
 bc0:	05 d0       	rcall	.+10     	; 0xbcc <__divmodhi4_neg2>
 bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__divmodhi4_exit>

00000bc4 <__divmodhi4_neg1>:
 bc4:	90 95       	com	r25
 bc6:	81 95       	neg	r24
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <__divmodhi4_neg2>:
 bcc:	70 95       	com	r23
 bce:	61 95       	neg	r22
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bd2 <__divmodhi4_exit>:
 bd2:	08 95       	ret

00000bd4 <__udivmodsi4>:
 bd4:	a1 e2       	ldi	r26, 0x21	; 33
 bd6:	1a 2e       	mov	r1, r26
 bd8:	aa 1b       	sub	r26, r26
 bda:	bb 1b       	sub	r27, r27
 bdc:	fd 01       	movw	r30, r26
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <__udivmodsi4_ep>

00000be0 <__udivmodsi4_loop>:
 be0:	aa 1f       	adc	r26, r26
 be2:	bb 1f       	adc	r27, r27
 be4:	ee 1f       	adc	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	a2 17       	cp	r26, r18
 bea:	b3 07       	cpc	r27, r19
 bec:	e4 07       	cpc	r30, r20
 bee:	f5 07       	cpc	r31, r21
 bf0:	20 f0       	brcs	.+8      	; 0xbfa <__udivmodsi4_ep>
 bf2:	a2 1b       	sub	r26, r18
 bf4:	b3 0b       	sbc	r27, r19
 bf6:	e4 0b       	sbc	r30, r20
 bf8:	f5 0b       	sbc	r31, r21

00000bfa <__udivmodsi4_ep>:
 bfa:	66 1f       	adc	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	1a 94       	dec	r1
 c04:	69 f7       	brne	.-38     	; 0xbe0 <__udivmodsi4_loop>
 c06:	60 95       	com	r22
 c08:	70 95       	com	r23
 c0a:	80 95       	com	r24
 c0c:	90 95       	com	r25
 c0e:	9b 01       	movw	r18, r22
 c10:	ac 01       	movw	r20, r24
 c12:	bd 01       	movw	r22, r26
 c14:	cf 01       	movw	r24, r30
 c16:	08 95       	ret

00000c18 <__umulhisi3>:
 c18:	a2 9f       	mul	r26, r18
 c1a:	b0 01       	movw	r22, r0
 c1c:	b3 9f       	mul	r27, r19
 c1e:	c0 01       	movw	r24, r0
 c20:	a3 9f       	mul	r26, r19
 c22:	70 0d       	add	r23, r0
 c24:	81 1d       	adc	r24, r1
 c26:	11 24       	eor	r1, r1
 c28:	91 1d       	adc	r25, r1
 c2a:	b2 9f       	mul	r27, r18
 c2c:	70 0d       	add	r23, r0
 c2e:	81 1d       	adc	r24, r1
 c30:	11 24       	eor	r1, r1
 c32:	91 1d       	adc	r25, r1
 c34:	08 95       	ret

00000c36 <__udivmodhi4>:
 c36:	aa 1b       	sub	r26, r26
 c38:	bb 1b       	sub	r27, r27
 c3a:	51 e1       	ldi	r21, 0x11	; 17
 c3c:	07 c0       	rjmp	.+14     	; 0xc4c <__udivmodhi4_ep>

00000c3e <__udivmodhi4_loop>:
 c3e:	aa 1f       	adc	r26, r26
 c40:	bb 1f       	adc	r27, r27
 c42:	a6 17       	cp	r26, r22
 c44:	b7 07       	cpc	r27, r23
 c46:	10 f0       	brcs	.+4      	; 0xc4c <__udivmodhi4_ep>
 c48:	a6 1b       	sub	r26, r22
 c4a:	b7 0b       	sbc	r27, r23

00000c4c <__udivmodhi4_ep>:
 c4c:	88 1f       	adc	r24, r24
 c4e:	99 1f       	adc	r25, r25
 c50:	5a 95       	dec	r21
 c52:	a9 f7       	brne	.-22     	; 0xc3e <__udivmodhi4_loop>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	bc 01       	movw	r22, r24
 c5a:	cd 01       	movw	r24, r26
 c5c:	08 95       	ret

00000c5e <_exit>:
 c5e:	f8 94       	cli

00000c60 <__stop_program>:
 c60:	ff cf       	rjmp	.-2      	; 0xc60 <__stop_program>
